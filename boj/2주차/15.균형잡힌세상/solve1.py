import sys
ip, op = sys.stdin, sys.stdout  # 입출력 설정
ret = []  # 결과 리스트

while True:
    s = ip.readline().rstrip()  # 문자열 입력
    if s == '.':  # 종료 조건
        break
    
    stk, case = [], ['[', ']', '(', ')']  # 스택, 괄호 문자
    for c in s:
        if c in case:  # 괄호 문자만 처리
            if c == '[' or c == '(':  # 열린 괄호
                stk.append(c)
            elif stk and c == ')' and stk[-1] == '(':  # 소괄호 짝
                stk.pop()
            elif stk and c == ']' and stk[-1] == '[':  # 대괄호 짝
                stk.pop()
            else:  # 짝 안 맞음
                stk.append(c)
    
    ret.append('no' if stk else 'yes')  # 스택 비어 있으면 yes

op.write('\n'.join(ret) + '\n')  # 결과 출력
"""
문제 접근 방법과 아이디어
문제 이해
* 목표: 문자열이 괄호((), [])가 올바르게 짝지어진 "균형 잡힌 문자열"인지 판단.
* 조건:
    * 입력: 여러 문자열, "."으로 종료.
    * 문자열: 영어, 숫자, 공백, 기호 포함, 길이 ≤ 100.
    * 괄호: '(', ')', '[', ']'.
    * 균형 조건: 모든 열린 괄호에 대응하는 닫힌 괄호가 정확히 짝지어짐.
* 출력: 각 문자열이 균형 잡히면 "yes", 아니면 "no" (줄 단위).
접근 아이디어
* 스택 사용:
    * 열린 괄호('(', '[')는 스택에 push.
    * 닫힌 괄호(')', ']')는 스택의 최상단과 짝 확인 후 pop.
    * 짝이 맞지 않거나 스택이 비어 있으면 실패.
* 상태 점검:
    * 문자열 끝에서 스택이 비어 있으면 균형 잡힘.
    * 스택에 남아 있거나 pop 불가능 시 비균형.
* 구현 전략:
    * deque로 스택 구현.
    * 괄호만 처리, 다른 문자는 무시.
    * 결과 리스트에 저장 후 한꺼번에 출력.

1. 입력 처리
* ip, op = sys.stdin, sys.stdout: 빠른 입출력 설정.
* ret: 결과를 저장할 리스트.
* while True: 무한 루프.
    * s: 문자열 입력 (줄바꿈 제거).
    * if s == '.': 종료 조건.
2. 문자열 처리
* stk, case = [], ['[', ']', '(', ')']: 빈 스택과 괄호 문자 리스트.
* for c in s: 문자열 각 문자 순회:
    * if c in case: 괄호 문자만 처리.
        * c == '[' or c == '(': 열린 괄호 → stk.append(c).
        * stk and c == ')' and stk[-1] == '(': 소괄호 짝 맞음 → stk.pop().
        * stk and c == ']' and stk[-1] == '[': 대괄호 짝 맞음 → stk.pop().
        * else: 짝 안 맞거나 스택 비어 있음 → stk.append(c) (비균형 표시).
* ret.append('no' if stk else 'yes'):
    * 스택이 비어 있으면 균형 → "yes".
    * 남아 있으면 비균형 → "no".
3. 출력
* '\n'.join(ret) + '\n': 결과 리스트를 줄 단위로 결합 후 출력.

문제 분석
* 문제: 백준 4949 "균형잡힌 세상".
* 입력: 여러 문자열, "."으로 종료.
* 출력: 각 문자열의 균형 여부 ("yes"/"no").
* 조건: '(', ')', '[', ']' 짝이 맞아야 함.

시간 복잡도
* 각 문자열 처리: O(|s|) (최대 100).
* 총 문자열 수: 문제 제한 없음, 합리적 T 가정.
* 총합: O(T * |s|) (T * 100 ≈ 10^4), 1초 내 충분.

"""