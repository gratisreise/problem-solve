import re
n = int(input())  # 줄 수
ret = []  # 결과 리스트

for _ in range(n):
    s = input()  # 문자열 입력
    srr = re.split(r'[a-z]+', s)  # 소문자 기준으로 분리
    # print([x for x in srr if x != ''])  # 디버깅용
    ret.extend(list(map(int, [x for x in srr if x != ''])))  # 숫자 추출 및 추가

print('\n'.join(map(str, sorted(ret))))  # 정렬 후 출력
"""
문제 접근 방법과 아이디어
문제 이해
* 목표: 여러 줄의 문자열에서 숫자를 추출해 오름차순으로 출력.
* 조건:
    * 줄 수: N (1 ≤ N ≤ 100).
    * 각 줄: 영어 소문자와 숫자 혼합 (길이 ≤ 100).
    * 숫자: 연속된 숫자열 (0으로 시작 가능).
* 출력: 추출된 숫자 리스트 (줄 단위).
접근 아이디어
* 정규 표현식:
    * re.split()으로 영어 소문자 부분을 기준으로 분리.
    * 결과에서 빈 문자열 제외 후 숫자만 추출.
* 정렬:
    * 추출된 숫자를 정수로 변환 후 오름차순 정렬.
* 구현 전략:
    * 각 줄 처리 후 전체 리스트에 추가.
    * 최종 리스트 정렬 후 출력.
1. 입력 처리
* n: 줄 수(N).
* ret: 추출된 숫자를 저장할 리스트.
2. 문자열 처리
* for _ in range(n): N번 반복.
    * s: 입력 문자열.
    * re.split(r'[a-z]+', s):
        * r'[a-z]+': 하나 이상의 연속된 소문자 패턴.
        * 문자열을 소문자 부분으로 분리 (예: "ab12cd34" → ['', '12', '34']).
    * [x for x in srr if x != '']: 빈 문자열('') 제외 (예: ['12', '34']).
    * map(int, ...): 문자열을 정수로 변환 (예: [12, 34]).
    * list(...): 리스트로 변환.
    * ret.extend(...): 결과 리스트에 추가.
3. 출력
* sorted(ret): 오름차순 정렬.
* map(str, ...): 정수를 문자열로 변환.
* '\n'.join(...): 줄 단위로 결합 후 출력.

문제 분석
* 문제: 백준 2870 "수학숙제".
* 입력: N, N개의 문자열.
* 출력: 추출된 숫자 리스트 (오름차순, 줄 단위).
* 조건: 숫자는 연속된 숫자열, 0으로 시작 가능.

시간 복잡도
* 문자열 분리: O(|s|) (각 문자열 길이).
* N번 반복: O(N * |s|).
* 정렬: O(K log K), K는 총 숫자 개수 (K ≤ N * |s|).
* 총합: O(N * |s| + K log K) (N ≤ 100, |s| ≤ 100, ≈ 10^4), 1초 내 충분.
결론
* 정확성: 정규식으로 숫자 정확히 추출, 오름차순 정렬.
* 효율성: 시간 O(N * |s| + K log K), 공간 O(K).
* 아이디어: re.split()으로 간단히 숫자 분리, 정렬로 문제 해결.
"""