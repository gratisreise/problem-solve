import sys

n = int(sys.stdin.readline())
scores = [float(sys.stdin.readline()) for _ in range(n)]
scores.sort()

for score in scores[:7]:
    print("{0:.3f}".format(score))


"""
코드 설명
1. 입력 처리
* 입력:
    * n: 점수 개수 (7 ≤ N ≤ 100,000).
        * sys.stdin.readline(): 빠른 입력 처리 (일반 input()보다 효율적).
    * scores: N개의 실수 점수 리스트.
        * float(sys.stdin.readline()): 각 줄의 점수를 실수로 변환.
        * 리스트 컴프리헨션으로 N번 입력받음.
2. 정렬
* scores.sort(): 점수를 오름차순으로 정렬.
    * Python의 sort()는 Timsort 알고리즘 사용 (안정적이고 효율적).
    * 상위 7명을 선택하기 위해 낮은 점수부터 정렬.
3. 상위 7명 출력
* scores[:7]: 정렬된 리스트에서 첫 7개 요소 슬라이싱.
* 출력 형식:
    * "{0:.3f}".format(score): 각 점수를 소수점 셋째 자리까지 포맷팅.
        * .3f: 고정 소수점, 3자리까지 표시 (문제 요구사항).
    * print(): 각 점수를 개별 줄에 출력.

문제 분석
* 문제: 백준 14729 "칠무해".
* 입력:
    * N: 점수 개수.
    * N개의 실수 점수 (0 ≤ 점수 ≤ 10,000, 소수점 아래 최대 3자리).
* 조건:
    * N개의 점수 중 낮은 순서로 7개 선택.
    * 출력은 오름차순, 소수점 셋째 자리까지.
* 출력: 상위 7명의 점수 (줄 바꿈).

시간 복잡도
* 입력: O(N) (≈ 10^5).
* 정렬: O(N log N) (Timsort, ≈ 10^5 log 10^5 ≈ 1.7×10^6).
* 출력: O(1) (고정 7개 출력).
* 총합: O(N log N) (≈ 1.7×10^6).
* 결과: 2초 내 충분 (10^8 대비 여유).

공간 복잡도
* scores: O(N) ≈ 0.8MB (N ≤ 10^5, 실수 8바이트 가정).
* 총합: 약 0.8MB (128MB 내 여유).

결론
* 정확성: 조건 충족 (상위 7명, 오름차순, 소수점 3자리), 샘플 통과.
* 효율성: 시간 O(N log N), 공간 O(N)으로 최적.
* 특징:
    * 간단한 정렬 문제.
    * sys.stdin.readline()으로 입력 최적화.
    * 포맷팅으로 출력 형식 맞춤.
* 검증: N 범위 내 효율적 동작.

"""